// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using BlazorCableReel.Server.Models;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BlazorCableReel.Server.Data
{
    public partial class Cablereel_DevContext : DbContext
    {
        public Cablereel_DevContext()
        {
        }

        public Cablereel_DevContext(DbContextOptions<Cablereel_DevContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Boqentry> Boqentries { get; set; }
        public virtual DbSet<Boqsetup> Boqsetups { get; set; }
        public virtual DbSet<Clients> Clients { get; set; }
        public virtual DbSet<DesignRepo> DesignRepos { get; set; }
        public virtual DbSet<Material> Materials { get; set; }
        public virtual DbSet<ProjectMaster> ProjectMasters { get; set; }
        public virtual DbSet<ProjectMaterial> ProjectMaterials { get; set; }
        public virtual DbSet<ProjectScope> ProjectScopes { get; set; }
        public virtual DbSet<ProjectScopeProgress> ProjectScopeProgresses { get; set; }
        public virtual DbSet<ProjectSite> ProjectSites { get; set; }
        public virtual DbSet<ProjectType> ProjectTypes { get; set; }
        public virtual DbSet<Rtum> Rta { get; set; }
        public virtual DbSet<Scope> Scopes { get; set; }
        public virtual DbSet<Site> Sites { get; set; }
        public virtual DbSet<Stage> Stages { get; set; }
        public virtual DbSet<Status> Statuses { get; set; }
        public virtual DbSet<TeamLeader> TeamLeaders { get; set; }
        public virtual DbSet<Uom> Uoms { get; set; }

       
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<Boqentry>(entity =>
            {
                entity.HasOne(d => d.Mat)
                    .WithMany(p => p.Boqentries)
                    .HasForeignKey(d => d.MatId)
                    .HasConstraintName("FK_BOQEntry_Materials");

                entity.HasOne(d => d.Sited)
                    .WithMany(p => p.Boqentries)
                    .HasForeignKey(d => d.SitedId)
                    .HasConstraintName("FK_BOQEntry_Sites");
            });

            modelBuilder.Entity<Boqsetup>(entity =>
            {
                entity.HasOne(d => d.Mat)
                    .WithMany(p => p.BoqsetupMats)
                    .HasForeignKey(d => d.MatId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOQSetup_Materials");

                entity.HasOne(d => d.ParentMat)
                    .WithMany(p => p.BoqsetupParentMats)
                    .HasForeignKey(d => d.ParentMatId)
                    .HasConstraintName("FK_BOQSetup_Materials1");
            });

            modelBuilder.Entity<DesignRepo>(entity =>
            {
                entity.HasOne(d => d.Site)
                    .WithMany(p => p.DesignRepos)
                    .HasForeignKey(d => d.SiteId)
                    .HasConstraintName("FK_DesignRepo_Sites");
            });

            modelBuilder.Entity<ProjectMaster>(entity =>
            {
                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ProjectMasters)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProjectMaster_Client");

                entity.HasOne(d => d.ProjectType)
                    .WithMany(p => p.ProjectMasters)
                    .HasForeignKey(d => d.ProjectTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProjectMaster_ProjectType");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ProjectMasters)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProjectMaster_Status");
            });

            modelBuilder.Entity<ProjectMaterial>(entity =>
            {
                entity.HasOne(d => d.Material)
                    .WithMany(p => p.ProjectMaterials)
                    .HasForeignKey(d => d.MaterialId)
                    .HasConstraintName("FK_ProjectMaterials_Materials");

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.ProjectMaterials)
                    .HasForeignKey(d => d.SiteId)
                    .HasConstraintName("FK_ProjectMaterials_ProjectSite");

                entity.HasOne(d => d.Uom)
                    .WithMany(p => p.ProjectMaterials)
                    .HasForeignKey(d => d.UomId)
                    .HasConstraintName("FK_ProjectMaterials_UOM");
            });

            modelBuilder.Entity<ProjectScope>(entity =>
            {
                entity.HasOne(d => d.Posite)
                    .WithMany(p => p.ProjectScopes)
                    .HasForeignKey(d => d.PositeId)
                    .HasConstraintName("FK_ProjectScope_ProjectSite");

                entity.HasOne(d => d.Scope)
                    .WithMany(p => p.ProjectScopes)
                    .HasForeignKey(d => d.ScopeId)
                    .HasConstraintName("FK_ProjectScope_Scope");

                entity.HasOne(d => d.Uom)
                    .WithMany(p => p.ProjectScopes)
                    .HasForeignKey(d => d.UomId)
                    .HasConstraintName("FK_ProjectScope_UOM");
            });

            modelBuilder.Entity<ProjectScopeProgress>(entity =>
            {
                entity.HasOne(d => d.ProjectScope)
                    .WithMany(p => p.ProjectScopeProgresses)
                    .HasForeignKey(d => d.ProjectScopeId)
                    .HasConstraintName("FK_ProjectScopeProgress_ProjectScope");
            });

            modelBuilder.Entity<ProjectSite>(entity =>
            {
                entity.HasOne(d => d.Po)
                    .WithMany(p => p.ProjectSites)
                    .HasForeignKey(d => d.Poid)
                    .HasConstraintName("FK_ProjectSite_ProjectMaster");

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.ProjectSites)
                    .HasForeignKey(d => d.SiteId)
                    .HasConstraintName("FK_ProjectSite_Sites");

                entity.HasOne(d => d.Stage)
                    .WithMany(p => p.ProjectSites)
                    .HasForeignKey(d => d.StageId)
                    .HasConstraintName("FK_ProjectSite_Stage");

                entity.HasOne(d => d.TeamLeader)
                    .WithMany(p => p.ProjectSites)
                    .HasForeignKey(d => d.TeamLeaderId)
                    .HasConstraintName("FK_ProjectSite_TeamLeader");
            });

            modelBuilder.Entity<Rtum>(entity =>
            {
                entity.HasOne(d => d.Site)
                    .WithMany(p => p.Rta)
                    .HasForeignKey(d => d.SiteId)
                    .HasConstraintName("FK_RTA_Sites");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}